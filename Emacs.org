#+title: Emacs initialization
#+OPTIONS: author:nil date:nil
#+FILETAGS: :emacs:

* Package management

#+begin_src emacs-lisp

  (require 'package)
  (setq package-archives '(
			   ("melpa" . "https://melpa.org/packages/")
			   ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ;; ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ))
  (package-initialize)

  (message "[INIT] successfully setup package managers")

#+end_src

* use-package

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))

  (message "[INIT] successfully setup use-package")

#+end_src

- [[https://emacs.stackexchange.com/a/50603/30155][use-package won't load]]

* Constants

#+begin_src emacs-lisp

  (setq

   ;; full name of the user logged in
   user-full-name "Christopher E. Mower"


   ;; file used for storing customization information.
   custom-file (concat user-emacs-directory "/custom.el")

   ;; application that opens pdf documents
   pdf-open-application
   (cond
    ((string-equal system-type "gnu/linux") "evince")
    ((string-equal system-type "darwin") "open"))

   ;; default user directory for storing custom theme files
   custom-theme-directory "~/.emacs.d/themes"

   ;; number of lines of margin at the top and bottom of a window
   scroll-margin 5

   ;; the number of lines to try scrolling a window by when point moves out
   scroll-step 1

   ;; The day of the week on which a week in the calendar begins
   ;; 0 means Sunday (default), 1 means Monday, and so on
   calendar-week-start-day 1

   ;; inhibit the startup screen
   inhibit-splash-screen t

   )

  (message "[INIT] set constants")

#+end_src

** Resources

- https://stackoverflow.com/a/1817318/4650592
- https://www.reddit.com/r/emacs/comments/6dqap5/how_to_keep_initel_clean_if/
- https://emacs.stackexchange.com/a/59811/30155

* Custom functions

#+begin_src emacs-lisp

  (defun open-init-file ()
    "Open Emacs init file."
    (interactive)
    (find-file (expand-file-name "Emacs.org" user-emacs-directory)))

  (defun report-init-stage (str)
    (message (concat "[INIT] " str)))

  (report-init-stage "successfuly setup custom functions")

#+end_src

* User interface

** Theme

#+begin_src emacs-lisp
  ;; (load-theme 'spacegray t)
  (load-theme 'monokai t)

  (report-init-stage "successfully setup emacs theme")

#+end_src

** Appearance

#+begin_src emacs-lisp

  (scroll-bar-mode 0) ;; remove scroll bar
  (tool-bar-mode 0) ;; remove tool bar
  (menu-bar-mode 0) ;; remove menu bar
  (show-paren-mode 1) ;; highlight parentheses
  (global-hl-line-mode 1) ;; highlight current line
  (global-linum-mode 1) ;; show line numbers

  (report-init-stage "successfully setup appearance")

#+end_src

** Resources

- http://ergoemacs.org/emacs/emacs_highlight_parenthesis.html

* Magit

https://magit.vc/manual/magit/

#+begin_src emacs-lisp

  (use-package magit
    :ensure t)

  ;; Custom functions for opening GitHub from magit
  (defun parse-github-url (url)
    "convert a git remote location as a HTTP URL"
    (if (string-match "^http" url)
	url
      (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
				"https://\\2/\\3"
				url)))

  (defun magit-open-repo ()
    "open remote repo URL"
    (interactive)
    (let ((url (magit-get "remote" "origin" "url")))
      (progn
	(browse-url (parse-github-url url))
	(message "Opening %s" url))))

  (add-hook 'magit-mode-hook
	    (lambda ()
	      (local-set-key (kbd "o") 'magit-open-repo)))

  (report-init-stage "successfully setup magit")

#+end_src

* Undo

#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :init
    (setq undo-tree-visualizer-diff t)
    :config
    (global-undo-tree-mode))


  (report-init-stage "successfully setup undo-tree")

#+end_src

* Org

** Constants

#+begin_src emacs-lisp

  (setq

   ;; default location to look for Org files
   org-directory "~/Dropbox/org"

   ;; font-lock should hide the emphasis marker characters
   org-hide-emphasis-markers t

   ;; turn on org-indent-mode on startup.
   org-startup-indented t

   ;; insert state change notes and time stamps into a drawer
   org-log-into-drawer t

   ;; information to record when a task moves to the DONE state.
   org-log-done t

   ;; default target for storing notes
   org-default-notes-file (concat org-directory "/quick.org")

   ;; name of the command for executing Python code.
   org-babel-python-command "python3"

   ;; commands to process a LaTeX file to a PDF file
   org-latex-pdf-process
   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b"
     "bibtex %b"
     "makeindex %b"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b")

   ;; sorting structure for the agenda items of a single day
   org-agenda-sorting-strategy
   '((agenda habit-down time-up priority-down effort-up category-keep)
     (todo priority-down effort-up category-keep)
     (tags priority-down effort-up category-keep)
     (search category-keep))

   ;; don’t show deadlines when the corresponding item is done
   org-agenda-skip-deadline-if-done t

   ;; don’t show scheduled items in agenda when they are done
   org-agenda-skip-scheduled-if-done t

   ;; custom commands for the agenda
   org-agenda-custom-commands
   '(

     ;; view completed tasks today
     ("D" "Daily review"
      tags "+CLOSED>\"<-0d>\"/DONE")

     ;; view completed tasks during past week
     ("W" "Weekly review"
      tags "+CLOSED>\"<-7d>\"/DONE")

     ;; view completed tasks during past two weeks
     ("R" "Fortnightly review"
      tags "+CLOSED>\"<-14d>\"/DONE")

     ;; view completed tasks during past month
     ("N" "Monthly review"
      tags "+CLOSED>\"<-1m>\"/DONE")

     ;; view TODO items without a timestamp
     ("U" "Unscheduled TODO"
      ((todo ""
             ((org-agenda-overriding-header "\nUnscheduled TODO")
              (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp)))))))


   ;; list of TODO entry keyword sequences and their interpretation
   org-todo-keywords
   '((sequence "TODO(t)" "|" "DONE(d)")
     (sequence "TODAY(o)" "|" "CANCELED(c)"))

   ;; faces for specific TODO keywords
   org-todo-keyword-faces
   '(("TODO" . (:foreground "#ffb347" :weight bold))
     ("DONE" . (:foreground "#037d50"))
     ("TODAY" . (:foreground "#add8e6" :weight bold))
     ("CANCELED" . (:foreground "red")))

   ;; external applications for opening ‘file:path’ items in a document
   org-file-apps
   (cond
    ((string-equal system-type "gnu/linux")
     '((auto-mode . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . "evince %s")))
    ((string-equal system-type "darwin")
     '((auto-mode . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . "open %s"))))

   )

#+end_src

*** Resources

- https://emacs.stackexchange.com/a/16561
- https://emacs.stackexchange.com/a/53007/30155
- https://www.reddit.com/r/orgmode/comments/jqu70x/how_to_create_a_custom_agenda_view_to_show_all/

** Org files

#+begin_src emacs-lisp

  ;; Add all .org files in org-directory recursively
  (load-library "find-lisp")
  (setq org-agenda-files (find-lisp-find-files org-directory "\.org$"))

  ;; Include .emacs.d
  (add-to-list 'org-agenda-files "~/.emacs.d")

#+end_src

*** Resources

- https://orgmode.org/list/81lit1jiol.fsf@gmail.com/t/

** Appearance

#+begin_src emacs-lisp

  ;; org-appear mode
  (use-package org-appear
    :ensure t
    :after org
    :init
    (setq org-appear-autolinks t)
    :hook (org-mode . org-appear-mode))

  ;; org-superstar
  (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list
     '("◉" "●" "○" "▣" "■" "□" "▶" "▷")))

#+end_src

*** Resources

- https://github.com/awth13/org-appear
- https://github.com/daviwil/dotfiles/blob/master/Emacs.org#fonts-and-bullets
- https://github.com/integral-dw/org-superstar-mode

** org-babel

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (python . t)))

#+end_src

** org-ref

#+begin_src emacs-lisp

  (use-package org-ref
    :ensure t
    :init
    (setq org-ref-bibliography-notes "~/Dropbox/org/reading.org"
          org-ref-default-bibliography '("~/Dropbox/org/bib/bib.bib")))

#+end_src

Note, when writing $\LaTeX$ equations, the standard environment to use is
#+begin_src :tangle no
\begin{equation}
  E = mc^2
\end{equation}
#+end_src
however, when writing $\LaTeX$ in Org-mode files, use
#+begin_src :tangle no
#+begin_export latex
  E = mc^2
#+end_export
#+end_src

*** Resources

- https://www.youtube.com/watch?v=2t925KRBbFc
- https://emacs.stackexchange.com/a/58641/30155

** org-super-agenda

https://github.com/alphapapa/org-super-agenda

*** Preliminary setup

The following date indicators are required in the =org-super-agenda= setup in the next section.

#+begin_src emacs-lisp

  ;; Return day of week: Sun=0, Mon=1, Tues=2, ..., Sat=6
  (defun get-day-from-now (n)
    (-let*
        (((sec minute hour day month year dow dst utcoff)
          (decode-time (+ (* n 86400) (float-time)))))
      dow)) ;; dow <=> day-of-week

  ;; Get day of week today
  (setq day-of-week-today (get-day-from-now 0))

  ;; Get day of week end
  (-let* (((sec minute hour day month year dow dst utcoff) (decode-time (+ (* (- 8 day-of-week-today) 86400) (float-time)))))
    (setq org-end-of-week (format "%d-%02d-%02d" year month day)))

  ;; Get day of week soon date (i.e. 4 days)
  (-let* (((sec minute hour day month year dow dst utcoff) (decode-time (+ (* 4 86400) (float-time))))) ;; 4 days
    (setq org-soon-date (format "%d-%02d-%02d" year month day)))

  ;; Get day of week tomorrow date
  (-let* (((sec minute hour day month year dow dst utcoff) (decode-time (+ (* 2 86400) (float-time))))) ;; 2 days
    (setq org-tomorrow-date (format "%d-%02d-%02d" year month day)))

#+end_src

*** Main org-super-agenda configuration

#+begin_src emacs-lisp

  (use-package org-super-agenda
    :ensure t
    :config
    (org-super-agenda-mode t)
    (setq org-super-agenda-groups
          `((:name "Today" :time-grid t)
            (:name "Scheduled" :scheduled past)
            (:name "Overdue reading" :and (:deadline past :tag "reading"))
            (:name "Overdue" :deadline past)
            (:name "Scheduled Today" :todo "TODAY")
            (:name "Read by today" :and (:deadline today :tag "reading"))
            (:name "Watch today" :and (:deadline today :tag "watch"))
            (:name "By today" :deadline today)
            (:name "Read tomorrow" :and (:deadline (before ,org-tomorrow-date) :tag "reading"))
            (:name "By tomorrow" :deadline (before ,org-tomorrow-date))
            (:name "Read by EOW" :and (:deadline (before ,org-end-of-week) :tag "reading"))
            (:name "Watch by EOW" :and (:deadline (before ,org-end-of-week) :tag "watch"))
            (:name "By EOW" :deadline (before ,org-end-of-week))
            (:name "Reading" :tag "reading"))))

#+end_src

*** Resources

- https://stackoverflow.com/a/67741229
- https://github.com/alphapapa/org-super-agenda/blob/master/examples.org#concrete-dates

** Finished Org

#+begin_src emacs-lisp

  (report-init-stage "successfully setup Org")

#+end_src

* Keybindings

#+begin_src emacs-lisp

  ;; Org
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; Init file
  (global-set-key (kbd "C-c i") 'open-init-file)
#+end_src

* Hooks

#+begin_src emacs-lisp

  ;; remove any trailing whitespace on save
  (add-hook 'after-save-hook 'delete-trailing-whitespace)

#+end_src

* Completed Emacs.org setup

#+begin_src emacs-lisp
  (report-init-stage "finished Emacs.org setup")
#+end_src

* Local variables

View this file as a text file.

# Local variables:
# eval: (add-hook 'after-save-hook 'org-html-export-to-html t t)
# end:
