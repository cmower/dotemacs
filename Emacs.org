#+title: Emacs initialization
#+OPTIONS: author:nil date:nil html-style:nil html-postamble:nil
#+FILETAGS: :emacs:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
#+STARTUP: inlineimages

* Todo

** TODO [#C] Lots of annoying errors get thrown when installed on PC's without my Dropbox

* Startup

** Reporting function

#+begin_src emacs-lisp

  (message "------------------- started Emacs.org -------------------")

  (defun report-init-stage (str)
    (message (concat "[INIT] successfully finished: " str)))

#+end_src

** Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; Seems to have an effect, see plot below.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

I ran a quick test to check if the above code actually makes a difference.
=On=: means =gc-cons-threshold= is set (above), and
=Off=: means =gc-cons-threshold= is the default value.
The trials were executed on a PC running Ubuntu 20.04, with a 16-core Intel(R) Core(TM) i9-9900KF CPU @ 3.60GHz.

#+tblname: data_table
| Off (secs) | On (secs) |
|       2.03 |      1.67 |
|       1.67 |      1.29 |
|       1.73 |      1.28 |
|       1.67 |      1.28 |
|       1.66 |      1.28 |

#+begin_src python :var data=data_table :tangle no
  import numpy
  import matplotlib.pyplot as plt
  off = numpy.array([d[0] for d in data[1:]])
  on = numpy.array([d[1] for d in data[1:]])
  means = [on.mean(), off.mean()]
  stds = [on.std(), off.std()]
  fig, ax = plt.subplots(figsize=(4, 3), facecolor='#272822', tight_layout=True)
  ax.bar([0, 1], means, yerr=stds, ecolor='#006FE0', color=['#F92672', '#FD971F'])
  ax.set_title('Performance comparison', color='white', fontsize=15)
  ax.set_xticks([0, 1])
  ax.set_xticklabels(['On', 'Off'], fontsize=15)
  ax.set_ylim(0, 2)
  ax.set_facecolor('#272822')
  ax.spines['right'].set_color('white')
  ax.spines['left'].set_color('white')
  ax.spines['bottom'].set_color('white')
  ax.spines['top'].set_color('white')
  ax.tick_params(axis='x', colors='white')
  ax.tick_params(axis='y', colors='white')
  ax.set_ylabel('Startup time (secs)', color='white', fontsize=15)
  ax.grid()
  plt.savefig('imgs/startup-performance.png', facecolor=fig.get_facecolor())
#+end_src

#+RESULTS:
: None

#+CAPTION: Startup duration comparison between default =gc-cons-threshold= (Off) and value set above (On).
[[./imgs/startup-performance.png]]

** Load path

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src

** Export Emacs.org to HTML


Automatically export Emacs.org to HTML after save.

#+begin_src emacs-lisp

  (defun org-html-export-to-html-for-emacs-init ()
    "When current buffer is Emacs.org, export to HTML"
    (when (string= (buffer-file-name) (expand-file-name "Emacs.org" user-emacs-directory))
      (message "Generating Emacs.html")
      (org-html-export-to-html)))

  (add-hook 'after-save-hook 'org-html-export-to-html-for-emacs-init)

#+end_src

** Font

I am trialing the [[https://dtinth.github.io/comic-mono-font/][Comic Mono font]]. 
The downside to this font is that there is no /italic/ (note, Emacs.org doesn't render italic in Emacs).
If this seems reasonable then I may consider investing in [[https://tosche.net/fonts/comic-code][Comic Code]] by Toshi Omagari.

#+begin_src emacs-lisp

  (add-to-list 'default-frame-alist '(font . "Comic Mono-12" ))

#+end_src

** Finished startup

#+begin_src emacs-lisp

  (report-init-stage "startup")

#+end_src

** Resources

- https://github.com/daviwil/dotfiles/blob/master/Emacs.org

* Constants

#+begin_src emacs-lisp

  (setq

   ;; full name of the user logged in
   user-full-name "Christopher E. Mower"

   ;; the email address of the current user
   user-mail-address "cmower@ed.ac.uk"

   ;; default location to look for Org files
   org-directory "~/Dropbox/org"

   ;; dropbox directory
   dropbox-directory "~/Dropbox"

   ;; reading directory
   reading-directory (expand-file-name "reading" dropbox-directory)

   ;; reading.org file name
   reading-org-file-name (expand-file-name "reading.org" org-directory)

   ;; reading.tex file name
   reading-tex-file-name (expand-file-name "reading.tex" org-directory)

   ;; reading.pdf file name
   reading-pdf-file-name (expand-file-name "reading.pdf" org-directory)

   ;; reading.bbl file name
   reading-bbl-file-name (expand-file-name "reading.bbl" org-directory)

   ;; reading.bib file name
   reading-bib-file-name (expand-file-name "reading.bib" reading-directory)

   ;; file used for storing customization information.
   custom-file (concat user-emacs-directory "/custom.el")

   ;; application that opens pdf documents
   pdf-open-application
   (cond
    ((string-equal system-type "gnu/linux") "evince")
    ((string-equal system-type "darwin") "open"))

   ;; default user directory for storing custom theme files
   custom-theme-directory "~/.emacs.d/themes"

   ;; number of lines of margin at the top and bottom of a window
   scroll-margin 5

   ;; the number of lines to try scrolling a window by when point moves out
   scroll-step 1

   ;; The day of the week on which a week in the calendar begins
   ;; 0 means Sunday (default), 1 means Monday, and so on
   calendar-week-start-day 1

   ;; inhibit the startup screen
   inhibit-splash-screen t

   ;; default dictionary to use
   ispell-dictionary "en_US"

   ;; fontify subscript and superscript strings
   font-latex-fontify-script nil

   ;; control use of local variables in files you visit
   ;; :safe means set the safe variables, and ignore the rest
   enable-local-variables :safe

   ;; output type to be used by htmlize when formatting code snippets
   org-html-htmlize-output-type 'css

   ;; List of warnings that the byte-compiler should issue
   ;; The 'cl' package is now officially deprecated in favor of 'cl-lib'.
   byte-compile-warnings '(cl-functions)

   ;; directory containing the user’s Emacs Lisp packages
   package-user-dir "~/Dropbox/.elpa"

   )

  (report-init-stage "constants")
#+end_src

** Resources

- https://stackoverflow.com/a/1817318/4650592
- https://www.reddit.com/r/emacs/comments/6dqap5/how_to_keep_initel_clean_if/
- https://emacs.stackexchange.com/a/59811/30155
- https://tex.stackexchange.com/a/74373
- https://emacs.stackexchange.com/a/38
- https://www.gnu.org/savannah-checkouts/gnu/emacs/news/NEWS.27.1
- https://github.com/kiwanami/emacs-epc/issues/35#issuecomment-660639327
- https://stackoverflow.com/a/15735931/4650592

* Package management

#+begin_src emacs-lisp

  (require 'package)
  (setq package-archives '(
                           ("melpa" . "https://melpa.org/packages/")
                           ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ;; ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ))
  (package-initialize)

  (report-init-stage "package managers")

#+end_src

* use-package

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))

  (report-init-stage "use-package")

#+end_src

- [[https://emacs.stackexchange.com/a/50603/30155][use-package won't load]]

* Custom functions

#+begin_src emacs-lisp

  (defun open-init-file ()
    "Open Emacs init file."
    (interactive)
    (find-file (expand-file-name "Emacs.org" user-emacs-directory)))

  (report-init-stage "custom functions")

#+end_src

* User interface

** Theme

#+begin_src emacs-lisp
  ;; (load-theme 'spacegray t)
  (load-theme 'monokai t)

  (report-init-stage "successfully setup emacs theme")

#+end_src

** Appearance

#+begin_src emacs-lisp

  (scroll-bar-mode 0) ;; remove scroll bar
  (tool-bar-mode 0) ;; remove tool bar
  (menu-bar-mode 0) ;; remove menu bar
  (show-paren-mode 1) ;; highlight parentheses
  (global-hl-line-mode 1) ;; highlight current line
  (global-linum-mode 1) ;; show line numbers

#+end_src

** Finished setup

#+begin_src emacs-lisp
(report-init-stage "appearance")
#+end_src

** Resources

- http://ergoemacs.org/emacs/emacs_highlight_parenthesis.html

* Magit

https://magit.vc/manual/magit/

#+begin_src emacs-lisp

  (use-package magit
    :ensure t)

  ;; Custom functions for opening GitHub from magit
  (defun parse-github-url (url)
    "convert a git remote location as a HTTP URL"
    (if (string-match "^http" url)
	url
      (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
				"https://\\2/\\3"
				url)))

  (defun magit-open-repo ()
    "open remote repo URL"
    (interactive)
    (let ((url (magit-get "remote" "origin" "url")))
      (progn
	(browse-url (parse-github-url url))
	(message "Opening %s" url))))

  (add-hook 'magit-mode-hook
	    (lambda ()
	      (local-set-key (kbd "o") 'magit-open-repo)))

  (report-init-stage "magit")

#+end_src

* Undo-tree

#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :init
    (setq undo-tree-visualizer-diff t)
    :config
    (global-undo-tree-mode))


  (report-init-stage "undo-tree")

#+end_src

* Auto complete

#+begin_src emacs-lisp

  (use-package auto-complete
    :commands auto-complete-mode
    :init
    (setq ac-delay 0.02
          ac-use-menu-map t
          ac-menu-height 50
          ac-use-quick-help nil
          ac-ignore-case nil
          ac-dwim  t
          ac-fuzzy-enable t)
    :config
    (auto-complete-mode t)
    (ac-config-default)
    (ac-flyspell-workaround))

  (report-init-stage "auto complete")

#+end_src

** Resources

- https://www.reddit.com/r/emacs/comments/7czblc/why_is_emacs_auto_complete_so_slow/

* Git modes

#+begin_src emacs-lisp

  (use-package git-modes
    :ensure t)

  (report-init-stage "git-modes")

#+end_src

* Helm

#+begin_src emacs-lisp

  (use-package helm
    :ensure t
    :bind
    (("M-x" . helm-M-x)
     ("C-x C-f" . helm-find-files)))

  (report-init-stage "helm")

#+end_src

* Spelling

#+begin_src emacs-lisp

  ;; Enable flyspell
  (add-hook 'org-mode-hook '(lambda () (flyspell-mode)))
  (add-hook 'LaTeX-mode-hook '(lambda () (flyspell-mode)))

  ;; Use right-mouse button to correct spelling
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mouse-map (kbd "<mouse-3>") #'flyspell-correct-word)))


  (report-init-stage "spelling")
#+end_src

** Resources

- https://emacs.stackexchange.com/a/7469/30155
- https://tex.stackexchange.com/a/210879/106130

* Org

** Constants

#+begin_src emacs-lisp

  (setq

   ;; font-lock should hide the emphasis marker characters
   org-hide-emphasis-markers t

   ;; turn on org-indent-mode on startup.
   org-startup-indented t

   ;; insert state change notes and time stamps into a drawer
   org-log-into-drawer t

   ;; information to record when a task moves to the DONE state.
   org-log-done t

   ;; default target for storing notes
   org-default-notes-file (concat org-directory "/quick.org")

   ;; name of the command for executing Python code.
   org-babel-python-command "python3"

   ;; commands to process a LaTeX file to a PDF file
   org-latex-pdf-process
   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b"
     "bibtex %b"
     "makeindex %b"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b")

   ;; sorting structure for the agenda items of a single day
   org-agenda-sorting-strategy
   '((agenda habit-down time-up priority-down effort-up category-keep)
     (todo priority-down effort-up category-keep)
     (tags priority-down effort-up category-keep)
     (search category-keep))

   ;; don’t show deadlines when the corresponding item is done
   org-agenda-skip-deadline-if-done t

   ;; don’t show scheduled items in agenda when they are done
   org-agenda-skip-scheduled-if-done t

   ;; custom commands for the agenda
   org-agenda-custom-commands
   '(

     ;; view completed tasks today
     ("D" "Daily review"
      tags "+CLOSED>\"<-0d>\"/DONE")

     ;; view completed tasks during past week
     ("W" "Weekly review"
      tags "+CLOSED>\"<-7d>\"/DONE")

     ;; view completed tasks during past two weeks
     ("R" "Fortnightly review"
      tags "+CLOSED>\"<-14d>\"/DONE")

     ;; view completed tasks during past month
     ("N" "Monthly review"
      tags "+CLOSED>\"<-1m>\"/DONE")

     ;; view TODO items without a timestamp
     ("U" "Unscheduled TODO"
      ((todo ""
             ((org-agenda-overriding-header "\nUnscheduled TODO")
              (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp)))))))


   ;; list of TODO entry keyword sequences and their interpretation
   org-todo-keywords
   '((sequence "TODO(t)" "|" "DONE(d)")
     (sequence "TODAY(o)" "|" "CANCELED(c)"))

   ;; faces for specific TODO keywords
   org-todo-keyword-faces
   '(("TODO" . (:foreground "#ffb347" :weight bold))
     ("DONE" . (:foreground "#037d50"))
     ("TODAY" . (:foreground "#add8e6" :weight bold))
     ("CANCELED" . (:foreground "red")))

   ;; external applications for opening ‘file:path’ items in a document
   org-file-apps
   (cond
    ((string-equal system-type "gnu/linux")
     '((auto-mode . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . "evince %s")))
    ((string-equal system-type "darwin")
     '((auto-mode . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . "open %s"))))

   ;; how the source code edit buffer should be displayed
   org-src-window-setup 'current-window

   ;; format specifications for the prefix of items in the agenda views.
   org-agenda-prefix-format
   '((agenda . " %?-12t% s")
     (todo . " %i %-12:c")
     (tags . " %i %-12:c")
     (search . " %i %-12:c"))
   ;; '((agenda . "%i %-12:c%?-12t% s")
   ;;   (todo . " %i %-12:c")
   ;;   (tags . " %i %-12:c")
   ;;   (search . " %i %-12:c"))

   ;; sorting structure for the agenda items of a single day.
   ;; org-agenda-sorting-strategy
   ;; ((agenda habit-down time-up priority-down effort-up category-keep)
   ;;  (todo priority-down effort-up category-keep)
   ;;  (tags priority-down effort-up category-keep)
   ;;  (search category-keep))
   ;; ((agenda habit-down time-up priority-down effort-up category-keep)
   ;;  (todo priority-down effort-up category-keep)
   ;;  (tags priority-down effort-up category-keep)
   ;;  (search category-keep))

   ;; the list of file extensions to consider as LaTeX logfiles
   org-latex-logfiles-extensions '("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl")

   )

#+end_src

*** TODO [#C] Investigate =org-agenda-sorting-strategy=

[2022-04-22 Fri]
Ideal strategy:
- sort mainly by number of days till deadline
- then priority
- after this, I guess what ever but perhaps best to read through documentation

*** Resources

- https://emacs.stackexchange.com/a/16561
- https://emacs.stackexchange.com/a/53007/30155
- https://www.reddit.com/r/orgmode/comments/jqu70x/how_to_create_a_custom_agenda_view_to_show_all/

** Org files

#+begin_src emacs-lisp

  ;; recursively find .org files in provided directory
  ;; modified from an Emacs Lisp Intro example
  (defun sa-find-org-file-recursively (&optional directory filext)
    "Return .org and .org_archive files recursively from DIRECTORY.
  If FILEXT is provided, return files with extension FILEXT instead."
    (interactive "DDirectory: ")
    (let* (org-file-list
           (case-fold-search t)         ; filesystems are case sensitive
           (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backupfiles
           (filext (or filext "org$\\\|org_archive"))
           (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
           (cur-dir-list (directory-files directory t file-name-regex)))
      ;; loop over directory listing
      (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
        (cond
         ((file-regular-p file-or-dir)             ; regular files
          (if (string-match fileregex file-or-dir) ; org files
              (add-to-list 'org-file-list file-or-dir)))
         ((file-directory-p file-or-dir)
          (dolist (org-file (sa-find-org-file-recursively file-or-dir filext)
                            org-file-list) ; add files found to result
            (add-to-list 'org-file-list org-file)))))))

  ;; the files to be used for agenda display
  (setq org-agenda-files
        (append
         (sa-find-org-file-recursively org-directory)
         (sa-find-org-file-recursively "~/Dropbox/Documents")))
#+end_src

*** Resources

- https://orgmode.org/list/81lit1jiol.fsf@gmail.com/t/
- https://stackoverflow.com/a/11384907/4650592

** Auto-complete

Currently turned off since it causes Emacs to crash.

#+begin_src emacs-lisp :tangle no

  ;; Org mode
  (use-package org-ac
    :ensure t
    :config
    (org-ac/config-default))

#+end_src

*** TODO [#C] Fix org-ac

[2022-04-21 Thu]
There is an issue when =org-ac= is turned on.
It causes Emacs to lag a lot, and sometimes crashes.

** Appearance

#+begin_src emacs-lisp

  ;; org-appear mode
  (use-package org-appear
    :ensure t
    :after org
    :init
    (setq org-appear-autolinks t)
    :hook (org-mode . org-appear-mode))

  ;; org-superstar
  (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list
     '("◉" "●" "○" "▣" "■" "□" "▶" "▷")))

#+end_src

*** Resources

- https://github.com/awth13/org-appear
- https://github.com/daviwil/dotfiles/blob/master/Emacs.org#fonts-and-bullets
- https://github.com/integral-dw/org-superstar-mode

** org-babel

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (python . t)))

#+end_src

** org-ref

#+begin_src emacs-lisp

  (use-package org-ref
    :ensure t
    :init
    (setq org-ref-bibliography-notes "~/Dropbox/org/reading.org"
          org-ref-default-bibliography '("~/Dropbox/org/bib/bib.bib")))

#+end_src

Note, when writing $\LaTeX$ equations, the standard environment to use is
#+begin_src :tangle no
\begin{equation}
  E = mc^2
\end{equation}
#+end_src
however, when writing $\LaTeX$ in Org-mode files, use
#+begin_src :tangle no
#+begin_export latex
  E = mc^2
#+end_export
#+end_src

*** Resources

- https://www.youtube.com/watch?v=2t925KRBbFc
- https://emacs.stackexchange.com/a/58641/30155

** org-super-agenda

https://github.com/alphapapa/org-super-agenda

*** Preliminary setup

The following date indicators are required in the =org-super-agenda= setup in the next section.

#+begin_src emacs-lisp

  ;; Return day of week: Sun=0, Mon=1, Tues=2, ..., Sat=6
  (defun get-day-from-now (n)
    (-let*
        (((sec minute hour day month year dow dst utcoff)
          (decode-time (+ (* n 86400) (float-time)))))
      dow)) ;; dow <=> day-of-week

  ;; Get day of week today
  (setq day-of-week-today (get-day-from-now 0))

  ;; Get day of week end
  (-let* (((sec minute hour day month year dow dst utcoff) (decode-time (+ (* (- 8 day-of-week-today) 86400) (float-time)))))
    (setq org-end-of-week (format "%d-%02d-%02d" year month day)))

  ;; Get day of week soon date (i.e. 4 days)
  (-let* (((sec minute hour day month year dow dst utcoff) (decode-time (+ (* 4 86400) (float-time))))) ;; 4 days
    (setq org-soon-date (format "%d-%02d-%02d" year month day)))

  ;; Get day of week tomorrow date
  (-let* (((sec minute hour day month year dow dst utcoff) (decode-time (+ (* 2 86400) (float-time))))) ;; 2 days
    (setq org-tomorrow-date (format "%d-%02d-%02d" year month day)))

#+end_src

*** Main org-super-agenda configuration

#+begin_src emacs-lisp

  (use-package org-super-agenda
    :ensure t
    :config
    (org-super-agenda-mode t)
    (setq org-super-agenda-groups
          `((:name "Today" :time-grid t)
            (:name "Scheduled" :scheduled past)
            (:name "Overdue reading" :and (:deadline past :tag "reading"))
            (:name "Overdue" :deadline past)
            (:name "Scheduled Today" :todo "TODAY")
            (:name "Dislike" :tag "dislike")
            (:name "ASAP" :tag "asap")
            (:name "Read by today" :and (:deadline today :tag "reading"))
            (:name "Watch today" :and (:deadline today :tag "watch"))
            (:name "By today" :deadline today)
            (:name "Read tomorrow" :and (:deadline (before ,org-tomorrow-date) :tag "reading"))
            (:name "By tomorrow" :deadline (before ,org-tomorrow-date))
            (:name "Read by EOW" :and (:deadline (before ,org-end-of-week) :tag "reading"))
            (:name "Watch by EOW" :and (:deadline (before ,org-end-of-week) :tag "watch"))
            (:name "By EOW" :deadline (before ,org-end-of-week))
            (:name "Reading" :tag "reading"))))
#+end_src

*** Resources

- https://stackoverflow.com/a/67741229
- https://github.com/alphapapa/org-super-agenda/blob/master/examples.org#concrete-dates

** Autogen reading notes and bibtex

#+begin_src emacs-lisp

  ;; Generate reading.bib
  (defun generate-reading-bib ()
    "Generates reading.bib, requires buffer-file-name to be ~/Dropbox/org/reading.org"
    (when (file-exists-p reading-bib-file-name)
      (delete-file reading-bib-file-name))
    (org-ref-extract-bibtex-blocks reading-bib-file-name))

  (defun generate-reading-bib-on-save ()
    "Generates reading.bib after save"
    (when (string= (buffer-file-name) reading-org-file-name)
      (generate-reading-bib)))

  (add-hook 'after-save-hook 'generate-reading-bib-on-save)


  ;; Generate reading.pdf
  (defun generate-reading-pdf ()
    "Generate reading.pdf, requires buffer-file-name to be ~/Dropbox/org/reading.org"
    (when (file-exists-p reading-tex-file-name)
      (delete-file reading-tex-file-name))
    (when (file-exists-p reading-pdf-file-name)
      (delete-file reading-pdf-file-name))
    (org-latex-export-to-pdf))


  (defun generate-reading-pdf-on-save ()
    "Generates reading.pdf after save"
    (when (string= (buffer-file-name) reading-org-file-name)
      (generate-reading-pdf)))

  (add-hook 'after-save-hook 'generate-reading-pdf-on-save)
#+end_src

** Finished Org

#+begin_src emacs-lisp

  (report-init-stage "Org")

#+end_src

* LaTeX

#+begin_src emacs-lisp

  ;; AucTeX
  (use-package auctex
    :defer t
    :ensure t
    :init
    (setq TeX-show-compilation 1))

  (use-package auctex-latexmk
    :defer t
    :ensure t
    :config
    (progn
      (auctex-latexmk-setup)
      (setq auctex-latexmk-inherit-TeX-PDF-mode t)))

  ;; Add custom command to compress pdf
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list
                  '(
                    "Compress"
                    "python $HOME/Dropbox/Documents/myscripts/my_python_scripts/pdfcompress.py %s.pdf"
                    TeX-run-shell nil t :help "Compresses PDF.")
                  t))

  ;; cdlatex
  ;; https://github.com/cdominik/cdlatex
  ;; (load "cdlatex.el")
  ;; (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)

  (report-init-stage "latex")
#+end_src

** TODO [#C] Learn how to use cdlatex

[2022-05-09 Mon]
When I tried out cdlatex, it seems like a good idea but there was some annoying issues.
Furthermore, I really need to see if it is configurable so I can customize to how I'd like to use it.

** Resources

- https://github.com/jwiegley/use-package/issues/379
- https://github.com/tom-tan/auctex-latexmk
- https://www.gnu.org/software/auctex/manual/auctex/Selecting-a-Command.html



* Python

#+begin_src emacs-lisp

  ;; Keybindings for indent left/right
  (add-hook 'python-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-.") 'python-indent-shift-right)))

  (add-hook 'python-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-,") 'python-indent-shift-left)))

  ;; Auto completion
  (use-package jedi
    :ensure t
    :init
    (setq jedi:complete-on-dot t
          jedi:tooltip-method nil
          jedi:get-in-function-call-delay 1)
    :config
    (add-hook 'python-mode-hook 'jedi:setup))


  (report-init-stage "python")
#+end_src

** TODO [#C] Investigate Jedi auto-completion for Emacs

** Resources

- http://tkf.github.io/emacs-jedi/latest/#install

* ROS

#+begin_src emacs-lisp

  (add-to-list 'auto-mode-alist '("\\.launch\\'" . xml-mode))
  (add-to-list 'auto-mode-alist '("\\.urdf\\'" . xml-mode))
  (add-to-list 'auto-mode-alist '("\\.xacro\\'" . xml-mode))

  (report-init-stage "ROS")

#+end_src

* Yaml

#+begin_src emacs-lisp

  (use-package yaml-mode
    :ensure t)

  (report-init-stage "yaml")
#+end_src

* Markdown

#+begin_src emacs-lisp

  (use-package markdown-mode
    :ensure t)


  (report-init-stage "markdown-mode")
#+end_src

* CMake

#+begin_src emacs-lisp

  (use-package cmake-mode
    :ensure t)

  (report-init-stage "cmake-mode")
#+end_src

* Keybindings

#+begin_src emacs-lisp

  ;; Org
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; Init file
  (global-set-key (kbd "C-c i") 'open-init-file)

  (report-init-stage "keybindings")

#+end_src

* Hooks

#+begin_src emacs-lisp

  ;; remove any trailing whitespace on save
  ;; turned off for now, this causes issues when coding - people complain that there is no newline at the end of files
  ;; (add-hook 'after-save-hook 'delete-trailing-whitespace)

  (report-init-stage "hooks")

#+end_src

* Completed Emacs.org setup

#+begin_src emacs-lisp
  (message "------------------- finished Emacs.org setup -------------------")
#+end_src
